/*
 * generated by Xtext 2.25.0
 */
package org.rm2pt.sample.basicfamily.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.rm2pt.sample.basicfamily.metamodel.basicfamily.BasicfamilyPackage;
import org.rm2pt.sample.basicfamily.metamodel.basicfamily.Family;
import org.rm2pt.sample.basicfamily.metamodel.basicfamily.Man;
import org.rm2pt.sample.basicfamily.metamodel.basicfamily.Woman;
import org.rm2pt.sample.basicfamily.services.DslGrammarAccess;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BasicfamilyPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BasicfamilyPackage.FAMILY:
				sequence_Family(context, (Family) semanticObject); 
				return; 
			case BasicfamilyPackage.MAN:
				sequence_Man(context, (Man) semanticObject); 
				return; 
			case BasicfamilyPackage.WOMAN:
				sequence_Woman(context, (Woman) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Family returns Family
	 *
	 * Constraint:
	 *     (name=EString (members+=Person members+=Person*)?)
	 */
	protected void sequence_Family(ISerializationContext context, Family semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Person returns Man
	 *     Man returns Man
	 *
	 * Constraint:
	 *     (name=EString (parents+=[Person|EString] parents+=[Person|EString]*)? (children+=[Person|EString] children+=[Person|EString]*)?)
	 */
	protected void sequence_Man(ISerializationContext context, Man semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Person returns Woman
	 *     Woman returns Woman
	 *
	 * Constraint:
	 *     (name=EString (parents+=[Person|EString] parents+=[Person|EString]*)? (children+=[Person|EString] children+=[Person|EString]*)?)
	 */
	protected void sequence_Woman(ISerializationContext context, Woman semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
