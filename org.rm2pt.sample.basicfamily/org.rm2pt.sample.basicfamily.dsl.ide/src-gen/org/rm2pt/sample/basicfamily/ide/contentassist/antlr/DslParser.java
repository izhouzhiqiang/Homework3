/*
 * generated by Xtext 2.25.0
 */
package org.rm2pt.sample.basicfamily.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.rm2pt.sample.basicfamily.ide.contentassist.antlr.internal.InternalDslParser;
import org.rm2pt.sample.basicfamily.services.DslGrammarAccess;

public class DslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getPersonAccess().getAlternatives(), "rule__Person__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getFamilyAccess().getGroup(), "rule__Family__Group__0");
			builder.put(grammarAccess.getFamilyAccess().getGroup_4(), "rule__Family__Group_4__0");
			builder.put(grammarAccess.getFamilyAccess().getGroup_4_3(), "rule__Family__Group_4_3__0");
			builder.put(grammarAccess.getManAccess().getGroup(), "rule__Man__Group__0");
			builder.put(grammarAccess.getManAccess().getGroup_4(), "rule__Man__Group_4__0");
			builder.put(grammarAccess.getManAccess().getGroup_4_3(), "rule__Man__Group_4_3__0");
			builder.put(grammarAccess.getManAccess().getGroup_5(), "rule__Man__Group_5__0");
			builder.put(grammarAccess.getManAccess().getGroup_5_3(), "rule__Man__Group_5_3__0");
			builder.put(grammarAccess.getWomanAccess().getGroup(), "rule__Woman__Group__0");
			builder.put(grammarAccess.getWomanAccess().getGroup_4(), "rule__Woman__Group_4__0");
			builder.put(grammarAccess.getWomanAccess().getGroup_4_3(), "rule__Woman__Group_4_3__0");
			builder.put(grammarAccess.getWomanAccess().getGroup_5(), "rule__Woman__Group_5__0");
			builder.put(grammarAccess.getWomanAccess().getGroup_5_3(), "rule__Woman__Group_5_3__0");
			builder.put(grammarAccess.getFamilyAccess().getNameAssignment_2(), "rule__Family__NameAssignment_2");
			builder.put(grammarAccess.getFamilyAccess().getMembersAssignment_4_2(), "rule__Family__MembersAssignment_4_2");
			builder.put(grammarAccess.getFamilyAccess().getMembersAssignment_4_3_1(), "rule__Family__MembersAssignment_4_3_1");
			builder.put(grammarAccess.getManAccess().getNameAssignment_2(), "rule__Man__NameAssignment_2");
			builder.put(grammarAccess.getManAccess().getParentsAssignment_4_2(), "rule__Man__ParentsAssignment_4_2");
			builder.put(grammarAccess.getManAccess().getParentsAssignment_4_3_1(), "rule__Man__ParentsAssignment_4_3_1");
			builder.put(grammarAccess.getManAccess().getChildrenAssignment_5_2(), "rule__Man__ChildrenAssignment_5_2");
			builder.put(grammarAccess.getManAccess().getChildrenAssignment_5_3_1(), "rule__Man__ChildrenAssignment_5_3_1");
			builder.put(grammarAccess.getWomanAccess().getNameAssignment_2(), "rule__Woman__NameAssignment_2");
			builder.put(grammarAccess.getWomanAccess().getParentsAssignment_4_2(), "rule__Woman__ParentsAssignment_4_2");
			builder.put(grammarAccess.getWomanAccess().getParentsAssignment_4_3_1(), "rule__Woman__ParentsAssignment_4_3_1");
			builder.put(grammarAccess.getWomanAccess().getChildrenAssignment_5_2(), "rule__Woman__ChildrenAssignment_5_2");
			builder.put(grammarAccess.getWomanAccess().getChildrenAssignment_5_3_1(), "rule__Woman__ChildrenAssignment_5_3_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DslGrammarAccess grammarAccess;

	@Override
	protected InternalDslParser createParser() {
		InternalDslParser result = new InternalDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
